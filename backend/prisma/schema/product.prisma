enum EnumProductVisible {
    all
    release
    reception
}

enum EnumProductUnit {
    piece
    kg
    g
    l
    ml
    mm
    m
    cm
}

// ----------Product

model ProductCategory {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    name String @unique

    linkProducts ProductToCategory[]
    linkUsers    ProductCategoryToUser[]

    @@map("product_category")
}

// Ниже приведены схемы которые не требуют явного указании схемы, можно пересоздать связь с помощью обычного many to many
// https://pris.ly/d/document-database-many-to-many
model ProductToCategory {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    category   ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String          @map("category_id") @db.ObjectId

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String  @map("product_id") @db.ObjectId

    @@unique([categoryId, productId])
    @@map("product_to_category")
}

model Product {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    visible EnumProductVisible

    name          String          @unique
    unit          EnumProductUnit @default(piece)
    salePrice     Float           @map("sale_price")
    purchasePrice Float           @map("purchase_price")

    linkCategories    ProductToCategory[]
    linkRegions       ProductToRegion[]
    linkUsers         ProductToUser[]
    releasePosition   ProductReleasePosition[]
    receptionPosition ProductReceptionPosition[]

    @@map("product")
}
